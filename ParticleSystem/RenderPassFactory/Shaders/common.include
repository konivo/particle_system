
////////////////////////////////////////////////////////////////////////////////
//constants//
const float PI = 3.141592654f;
const float TWO_PI = 2 * 3.141592654f;

////////////////////////////////////////////////////////////////////////////////
//uniforms//

//randomized vec2//
//shall be uniformly distributed. Look for some advice, how to make it properly
//they will be randomly rotated per pixel
uniform vec2[256] sampling_pattern;
vec2 SAMPLING_RANDOMIZATION_VECTOR;
int SAMPLING_PATTERN_RANDOMIZATION_OFFSET;

////////////////////////////////////////////////////////////////////////////////
//utility and library functions//
//
void init_sampling()
{
	int indexA = int(gl_FragCoord.x) *  173547 + int(gl_FragCoord.y) * 364525 + 1013904223;
	indexA = (indexA >> 4) & 0xFFF;

	int indexB = int(gl_FragCoord.x) *  472541 + int(gl_FragCoord.y) * 198791 + 2103477191;
	indexB = (indexB >> 4) & 0xFFF;

	SAMPLING_RANDOMIZATION_VECTOR = vec2( cos(TWO_PI * (indexA * indexB)/360), sin(TWO_PI * (indexB * indexA)/360));
	SAMPLING_PATTERN_RANDOMIZATION_OFFSET = indexB * indexA;
}

//
vec2 get_sampling_point(int i)
{
	return reflect(sampling_pattern[(i * 7 + SAMPLING_PATTERN_RANDOMIZATION_OFFSET) % 256], SAMPLING_RANDOMIZATION_VECTOR);
}

//
vec4 get_clip_coordinates (vec2 param, float imagedepth)
{
	return vec4((param * 2) - 1, imagedepth, 1);
}

//
vec4 reproject (mat4 transform, vec4 vector)
{
	vec4 result = transform * vector;
	result /= result.w;
	return result;
}

////////////////////////////////////////////////////////////////////////////////
//shadowmapping helpers//
//
float get_shadow(
	sampler2D shadow_texture,	//
	mat4 light_transform,			//model-view-projection transform
	vec4 pos									//position in world space
	)
{
	vec3 r_pos = (reproject(light_transform, pos).xyz + 1) * 0.5;
	vec4 comp = vec4(r_pos.z);	
	vec4 acc = vec4(0);
	
	acc += vec4(greaterThan(comp, textureGatherOffset(shadow_texture, r_pos.xy, ivec2(-1, -1)) ));
	acc += vec4(greaterThan(comp, textureGatherOffset(shadow_texture, r_pos.xy, ivec2(1, -1)) ));
	acc += vec4(greaterThan(comp, textureGatherOffset(shadow_texture, r_pos.xy, ivec2(-1, 1)) ));
	acc += vec4(greaterThan(comp, textureGatherOffset(shadow_texture, r_pos.xy, ivec2(1, 1)) ));
	
	acc += vec4(greaterThan(comp, textureGatherOffset(shadow_texture, r_pos.xy, ivec2(-0, -1)) ));
	acc += vec4(greaterThan(comp, textureGatherOffset(shadow_texture, r_pos.xy, ivec2(2, -1)) ));
	acc += vec4(greaterThan(comp, textureGatherOffset(shadow_texture, r_pos.xy, ivec2(-0, 1)) ));
	acc += vec4(greaterThan(comp, textureGatherOffset(shadow_texture, r_pos.xy, ivec2(2, 1)) ));
	
	acc += vec4(greaterThan(comp, textureGatherOffset(shadow_texture, r_pos.xy, ivec2(-1, 0)) ));
	acc += vec4(greaterThan(comp, textureGatherOffset(shadow_texture, r_pos.xy, ivec2(1, 2)) ));
	acc += vec4(greaterThan(comp, textureGatherOffset(shadow_texture, r_pos.xy, ivec2(-1, 0)) ));
	acc += vec4(greaterThan(comp, textureGatherOffset(shadow_texture, r_pos.xy, ivec2(1, 2)) ));
	
	acc += vec4(greaterThan(comp, textureGatherOffset(shadow_texture, r_pos.xy, ivec2(0, 0)) ));
	acc += vec4(greaterThan(comp, textureGatherOffset(shadow_texture, r_pos.xy, ivec2(2, 0)) ));
	acc += vec4(greaterThan(comp, textureGatherOffset(shadow_texture, r_pos.xy, ivec2(0, 2)) ));
	acc += vec4(greaterThan(comp, textureGatherOffset(shadow_texture, r_pos.xy, ivec2(2, 2)) ));

	return dot(acc, vec4(1/16.0));
}
